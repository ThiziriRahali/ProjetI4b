import java.io.*;
import java.net.*;
import java.util.*;
import java.util.concurrent.ConcurrentHashMap;

public class FroggerGamer {
    // Constantes et variables existantes
    public static final String FINISH_LINE_CHAR = "üèÅ";
    public static final String WALL_CHAR = "üß±";
    private static final int WIDTH = 10;
    private static final int HEIGHT = 10;
    private static final String FROG_CHAR = "üê∏";
    private static String FROGACT = FROG_CHAR;
    private static final String ROAD_CHAR = ".";
    private static final String TERRE_PLEIN_CHAR = "üå±";
    private static final String FROG_WIN = "ü§¥";
    private static Obstacle[] obstacles;
    private static final int LIVES_MAX = 3;
    public static int nbVieActuel;
    public static Arrivals A = new Arrivals();
    private static final int DIFFICULTE = 500; 
    private static volatile boolean running= true;
    
    // multijoueur
    private static Map<Socket, ClientHandler> clients = new ConcurrentHashMap<>();
    private static Map<Socket, PlayerInfo> players = new ConcurrentHashMap<>();
    private static int nextPlayerId = 1;
    

    static class PlayerInfo {
        int id;
        int frogX;
        int frogY;
        int lives;
        String frogChar;
        boolean isPlaying;
        
        public PlayerInfo(int id) {
            this.id = id;
            this.frogX = WIDTH / 2;
            this.frogY = HEIGHT - 1;
            this.lives = LIVES_MAX;
            this.frogChar = FROG_CHAR + id;
            this.isPlaying = true;
        }
    }
    
    //  client connect√©
    static class ClientHandler extends Thread {
        private Socket socket;
        private BufferedReader input;
        private PrintWriter output;
        private PlayerInfo player;
        
        public ClientHandler(Socket socket, PlayerInfo player) {
            this.socket = socket;
            this.player = player;
            try {
                this.input = new BufferedReader(new InputStreamReader(socket.getInputStream()));
                this.output = new PrintWriter(socket.getOutputStream(), true);
            } catch (IOException e) {
                e.printStackTrace();
            }
        }
        
        public void sendMessage(String message) {
            output.println(message);
        }
        
        public void requestInput(String prompt) {
            output.println("INPUT:" + prompt);
        }
        
        public void requestMove() {
            output.println("MOVE");
        }
        
        @Override
        public void run() {
            try {
                String message;
                while ((message = input.readLine()) != null) {
                    if (message.equals("JOIN")) {
                        // Envoyer menu au client
                        afficherMenuPrincipalClient(this);
                    } else if (message.equals("QUIT")) {
                        break;
                    } else if (player.isPlaying) {
              
                            try {
                                int choice = Integer.parseInt(message);
                                processMenuChoice(this, choice);
                            } catch (NumberFormatException e) {
                                switch(message){

                                    case "y": afficherMenuPrincipalClient(this); break;
                                    case "n": break;

                                }
                                
                                updatePlayer(player, message);
                                checkCollisionForPlayer(player);
                                    
                                
                            }
                        
                    }
                }
            } catch (IOException e) {
                System.out.println("Client d√©connect√© : " + e.getMessage());
            } finally {
                try {
                    removeClient(socket);
                    socket.close();
                } catch (IOException e) {
                    e.printStackTrace();
                }
            }
        }
    }
    
    private static void removeClient(Socket socket) {
        clients.remove(socket);
        players.remove(socket);
    }
    
    private static void processMenuChoice(ClientHandler client, int choice) {
        switch (choice) {
            case 1:
                startGameForClient(client);
                break;
            case 2:
                client.sendMessage("Mode multijoueur d√©j√† activ√© !");
                afficherMenuPrincipalClient(client);
                break;
            case 3:
                parametrerJeuClient(client);
                break;
            case 4:
                client.sendMessage("D√©connexion...");
                break;
            default:
                client.sendMessage("Choix invalide. Veuillez r√©essayer.");
                afficherMenuPrincipalClient(client);
        }
    }
    
    private static void afficherMenuPrincipalClient(ClientHandler client) {
        client.sendMessage("\n=== Menu Principal ===");
        client.sendMessage("1. Mode Solo");
        client.sendMessage("2. Mode Multijoueur");
        client.sendMessage("3. Param√®tres");
        client.sendMessage("4. Quitter");
        client.requestInput("Veuillez choisir une option : ");
    }
    
    private static void parametrerJeuClient(ClientHandler client) {
        client.sendMessage("\n=== Param√®tres du Jeu ===");
        client.sendMessage("1. Modifier le nombre de vies (Actuel : " + LIVES_MAX + ")");
        client.sendMessage("4. Retour au menu principal");
        client.requestInput("Votre choix : ");
    }
    
    private static void startGameForClient(ClientHandler client) {
        running=true;
        PlayerInfo player = players.get(client.socket);
        if (player != null) {
            player.isPlaying = true;
            player.lives = LIVES_MAX;
            player.frogX = WIDTH / 2;
            player.frogY = HEIGHT - 1;
            
            // D√©marrer le jeu pour ce client
            Thread gameThread = new Thread(() -> {
                while (player.isPlaying && running) {
                    renderForClient(client, player);
                    client.requestMove();
                    try {
                        Thread.sleep(DIFFICULTE);
                    } catch (InterruptedException e) {
                        e.printStackTrace();
                    }
                }
            });
            gameThread.start();
        }
    }
    
    private static void renderForClient(ClientHandler client, PlayerInfo player) {
        client.sendMessage("\033[H\033[2J");
        System.out.flush();
        StringBuilder sb = new StringBuilder();
        sb.append("Vies restantes : ").append(player.lives).append("\n");
        
        for (int y = 0; y < HEIGHT; y++) {
            for (int x = 0; x < WIDTH; x++) {
                if (Arrivals.isWPosition(x, y)) {
                    sb.append(FROG_WIN);
                } else if (y == 0) {
                    if(x % 5 == 0) {
                        sb.append(FINISH_LINE_CHAR);
                    } else {
                        sb.append(WALL_CHAR);
                    }
                } else if (x == player.frogX && y == player.frogY) {
                    sb.append(player.frogChar);
                } else if (isPlayerAt(x, y, player)) {
                    sb.append("üê∏"); // Autre joueur
                } else if (y == HEIGHT / 2) {
                    sb.append(TERRE_PLEIN_CHAR);
                } else if (isObstacleAt(x, y)) {
                    sb.append(Obstacle.OBSTACLE_CHAR);
                } else {
                    sb.append(ROAD_CHAR);
                }
                sb.append("\t");
            }
            sb.append("\n");
        }
        client.sendMessage(sb.toString());
    }
    
    private static boolean isPlayerAt(int x, int y, PlayerInfo currentPlayer) {
        for (PlayerInfo player : players.values()) {
            if (player != currentPlayer && player.frogX == x && player.frogY == y) {
                return true;
            }
        }
        return false;
    }

    public static synchronized void checkAllPlayersCollisions() {
        // V√©rifier les collisions pour tous les joueurs actifs
        for (PlayerInfo player : players.values()) {
            if (player.isPlaying && player.lives > 0) {
                checkCollisionForPlayer(player);
            }
        }
    }


    private static void checkCollisionForPlayer(PlayerInfo player) {
        if (isObstacleAt(player.frogX, player.frogY)) {
            
            player.lives--;
            ClientHandler client = getClientForPlayer(player);

            client.sendMessage("\033[H\033[2J");
            System.out.flush();
            
            
            if (client != null) {
                client.sendMessage("üíÄ Un obstacle vous a √©cras√© ! Il vous reste " + player.lives + " vies. üíÄ");
                
            }
            
            if (player.lives <= 0) {
                if (client != null) {
                    running=false;
                    client.sendMessage(GameOver());
                    client.sendMessage("Game Over ! Vous avez perdu toutes vos vies.");
                    askreplay(client);

                    return;
                }
            } else {
                resetFrog(player);
            }
        }
    }

    private static void askreplay(ClientHandler client){
        client.requestInput("Voulez-vous rejouer ? (y/n) : ");
    }
    
  

    private static void updatePlayer(PlayerInfo player, String move) {
       
        switch (move) {
            case "z": if (player.frogY > 1 ^ (player.frogY == 1 && player.frogX % 5 == 0)) player.frogY--; break;
            case "s": if (player.frogY < HEIGHT - 1) player.frogY++; break;
            case "q": if (player.frogX > 0) player.frogX--; break;
            case "d": if (player.frogX < WIDTH - 1) player.frogX++; break;
            case "x": player.isPlaying = false; break;
        }
    
        
        checkCollisionForPlayer(player);
        if (player.frogY == 0 && player.frogX % 5 == 0) {
            Arrivals.addWPosition(player.frogX, player.frogY);
            ClientHandler client = getClientForPlayer(player);
            if (client != null) {
                client.sendMessage("üéâ F√©licitations ! Un prince est apparu √† cette place !");
                resetFrog(player);
            }
            
            
            if (Arrivals.GlobalWin()) {
                
                client.sendMessage("\033[H\033[2J");
                System.out.flush();
                running=false;
                client.sendMessage(goodJob());
                client.sendMessage("üèÜ TOUS les emplacements sont remplis ! LE JEU EST TERMIN√â ! üèÜ");
                askreplay(client);
                
            }
        }
    }

    private static ClientHandler getClientForPlayer(PlayerInfo player) {
        for (Map.Entry<Socket, PlayerInfo> entry : players.entrySet()) {
            if (entry.getValue() == player) {
                return clients.get(entry.getKey());
            }
        }
        return null;
    }
    
   
    private static void resetFrog(PlayerInfo player) {
        player.frogX = WIDTH / 2;
        player.frogY = HEIGHT - 1;
    }
    private static String goodJob() {
        return "‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä                    ‚†Ä‚£Ä‚£Ä‚£Ä‚£Ä‚£Ä‚£Ä‚£§‚£§‚£§‚£§‚£§‚£§‚£§‚£§‚£§‚£∂‚£∂‚£¶‚†§‚°§‚†∂\n" +
        "‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚¢Ä‚£Ä‚£Ä‚£Ä‚£Ä‚£Ä‚£Ä‚£Ä‚£Ä‚£†‚£§‚£§‚£§‚£§‚£§‚£∂‚£∂‚£∂‚£∂‚£∂‚£æ‚£ø‚£ø‚£ø‚£ø‚£ø‚°ø‚†ø‚†ø‚†ø‚†ø‚†ø‚†ø‚†ø‚†ø‚†ü‚†õ‚†õ‚†õ‚†ø‚†ø‚†ª‚†ã‚†ü‚†ç‚£ø‚¢ø‚£Æ‚†Ä‚†Ä\n" +
        "‚¢∞‚£∂‚£∂‚£ø‚£∑‚£∑‚£∂‚£∑‚£ø‚£ø‚°ø‚†ø‚†ø‚†ø‚†ø‚†ø‚†ø‚†ø‚†õ‚†õ‚¢õ‚£õ‚£õ‚£õ‚†â‚†â‚†â‚†â‚†â‚†â‚†â‚¢â‚£°‚£§‚£∂‚£∂‚£∂‚£§‚£Ñ‚†Ä‚†Ä‚†Ä‚£∂‚£∂‚£∂‚£æ‚£ø‚£ø‚°º‚£ø‚£ø‚£∂‚£¶‚°Ä‚†Ä‚†Ä‚¢∫‚£ó‚†Ä‚†Ä‚†Ä\n" +
        "‚¢∏‚£ø‚°è‚†â‚†â‚†Ä‚¢Ä‚£§‚£¥‚£∂‚£∂‚£∂‚£§‚£¥‚£ø‚°Ü‚†Ä‚†Ä‚¢†‚£¥‚£ø‚£ø‚°ø‚¢ø‚£ø‚£ø‚£∑‚£Ñ‚†Ä‚†Ä‚†Ä‚£¥‚£ø‚£ø‚£ø‚†ã‚†â‚£ø‚£ø‚£ø‚£ø‚£Ü‚†Ä‚†à‚£ø‚£ø‚£ø‚£ø‚£ø‚°á‚¢∏‚£ø‚£ø‚£ø‚£ø‚°Ñ‚†Ä‚¢∏‚£∫‚††‚†Ä‚†Ä\n" +
        "‚†Ä‚£ø‚°á‚†Ä‚¢Ä‚£¥‚£ø‚£ø‚£ø‚†Å‚†à‚†ô‚¢ª‚£ø‚£ø‚°á‚†Ä‚£∞‚£ø‚£ø‚£ø‚£ø‚†Ä‚†Ä‚£ø‚£ø‚£ø‚£ø‚£∑‚°Ä‚£∏‚£ø‚£ø‚£ø‚£ø‚°á‚†Ä‚¢π‚£ø‚£ø‚£ø‚£ø‚°á‚†Ä‚£ø‚£ø‚£ø‚£ø‚£ø‚°á‚†∏‚£ø‚£ø‚£ø‚£ø‚£ø‚°Ñ‚¢∏‚£∏‚†Ä‚†Ä‚†Ä\n" +
        "‚†Ä‚£ø‚£ß‚†Ä‚£∏‚£ø‚£ø‚£ø‚£ø‚†Ä‚†Ä‚†Ä‚†Ä‚†π‚£ø‚°á‚†Ä‚£ø‚£ø‚£ø‚£ø‚£ø‚†Ä‚†Ä‚£ø‚£ø‚£ø‚£ø‚£ø‚£ß‚£ø‚£ø‚£ø‚£ø‚£ø‚°á‚†Ä‚¢∏‚£ø‚£ø‚£ø‚£ø‚£ø‚†Ä‚¢π‚£ø‚£ø‚£ø‚£ø‚°á‚†Ä‚£ø‚£ø‚£ø‚£ø‚£ø‚°á‚†Ä‚¢∞‚°ß‚†Ä‚†Ä\n" +
        "‚†Ä‚£ø‚£ø‚¢Ä‚£ø‚£ø‚£ø‚£ø‚£ø‚°Ä‚†Ä‚¢Ä‚£Ä‚£Ä‚£â‚£Å‚°Ä‚£ø‚£ø‚£ø‚£ø‚£ø‚°Ü‚†Ä‚¢π‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚°á‚†Ä‚†∏‚£ø‚£ø‚£ø‚£ø‚£ø‚†Ä‚¢∏‚£ø‚£ø‚£ø‚£ø‚°á‚†Ä‚£ø‚£ø‚£ø‚£ø‚£ø‚†Å‚¢†‚£ø‚°ç‚†Ä‚†Ä\n" +
        "‚†Ä‚£ø‚£ø‚†Ä‚£ø‚£ø‚£ø‚£ø‚£ø‚°á‚†ª‚¢ø‚£ø‚£ø‚£ø‚£ø‚†É‚£ø‚£ø‚£ø‚£ø‚£ø‚°á‚†Ä‚¢∏‚£ø‚£ø‚£ø‚£ø‚£ø‚¢ª‚£ø‚£ø‚£ø‚£ø‚°á‚†Ä‚†Ä‚£ø‚£ø‚£ø‚£ø‚°ø‚†Ä‚¢∏‚£ø‚£ø‚£ø‚£ø‚£ß‚†Ä‚£ø‚£ø‚£ø‚£ø‚£ø‚°á‚†Ä‚†Ä‚°á‚¢Ü‚†Ä‚†Ä\n" +
        "‚†Ä‚¢ª‚£ø‚°Ñ‚¢π‚£ø‚£ø‚£ø‚£ø‚°á‚†Ä‚¢∏‚£ø‚£ø‚£ø‚£ø‚†Ä‚†π‚£ø‚£ø‚£ø‚£ø‚°á‚†Ä‚¢∏‚£ø‚£ø‚£ø‚£ø‚†É‚†Ä‚†ª‚£ø‚£ø‚£ø‚£ø‚†Ä‚¢Ä‚£ø‚£ø‚£ø‚°ø‚†É‚†Ä‚£†‚£ø‚£ø‚£ø‚£ø‚£ø‚£¥‚£ø‚£ø‚°ø‚†ã‚†Ä‚†Ä‚†Ä‚£º‚£ø‚†Ä‚†Ä\n" +
        "‚†Ä‚¢∏‚£ø‚°á‚†à‚†ª‚£ø‚£ø‚£ø‚£ß‚†Ä‚¢∏‚£ø‚£ø‚£ø‚£ø‚†Ä‚†Ä‚†ô‚¢ø‚£ø‚£ø‚£∑‚£Ñ‚£º‚£ø‚£ø‚†ø‚†É‚†Ä‚†Ä‚†Ä‚†â‚†ª‚†ø‚£ø‚£ø‚£ø‚°ø‚†ü‚†ã‚†Ä‚†Ä‚†Ä‚†õ‚†õ‚†õ‚†õ‚†ã‚†â‚†à‚†â‚†Å‚¢Ä‚£Ä‚°Ä‚†Ä‚†Ä‚£∏‚£ø‚†Ñ‚†Ä\n" +
        "‚†Ä‚¢∏‚£ø‚°á‚†Ä‚†Ä‚†â‚†õ‚†ø‚£ø‚£ß‚£ø‚†ø‚†ü‚†ã‚†Å‚†Ä‚†Ä‚†Ä‚†Ä‚†à‚†ô‚†õ‚†õ‚¢õ‚°ã‚£Å‚£Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚£†‚£§‚£§‚£§‚£§‚£§‚£¥‚£§‚£§‚£∂‚£∂‚£§‚£§‚£Ñ‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä\n" +
        "‚†Ä‚†Ä‚£ø‚£ß‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚£Ä‚£§‚£§‚£§‚£§‚£∂‚£∂‚£∂‚£¶‚†Ä‚†Ä‚†Ä‚£†‚£∂‚£ø‚£ø‚°∑‚¢ø‚£ø‚£ø‚£∑‚£¶‚£Ä‚†Ä‚†Ä‚†ª‚¢ø‚£ø‚£ø‚£ø‚£ø‚£ø‚°è‚†õ‚¢ø‚£ø‚£ø‚£ø‚£ø‚£∑‚°Ñ‚†Ä‚†∏‚£ø‚£ø‚£ø‚£ø‚£ø‚†Ä‚†∏‚£ø‚°°‚†Ä\n" +
        "‚†Ä‚†Ä‚£ø‚£ø‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†∏‚£ø‚£ø‚£ø‚£ø‚£ø‚£∑‚†Ä‚†Ä‚£º‚£ø‚£ø‚£ø‚£ø‚£ø‚†Ä‚†Ä‚¢∏‚£ø‚£ø‚£ø‚£ø‚£ø‚°á‚†Ä‚¢∏‚£ø‚£ø‚£ø‚£ø‚£ø‚£á‚†Ä‚¢∏‚£ø‚£ø‚£ø‚£ø‚°ø‚†Å‚†Ä‚†Ä‚†à‚£ø‚£ø‚£ø‚°á‚†Ä‚†Ä‚¢π‚°ó‚°É\n" +
        "‚†Ä‚†Ä‚£ø‚£ø‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚†Ä‚¢†‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚†Ä‚†Ä‚¢∏‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚†Ä‚†∏‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚¢æ‚£ø‚£ø‚£ø‚£ø‚£•‚£Ä‚†Ä‚†Ä‚†Ä‚†Ä‚¢π‚£ø‚£ø‚†É‚†Ä‚†Ä‚¢Ä‚¢≥‚†¨\n" +
        "‚†Ä‚†Ä‚¢ø‚£ø‚°Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚†Ä‚†∏‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚°Ü‚†Ä‚¢∏‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚†Ä‚†Ä‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚†Ä‚†ô‚£ø‚£ø‚£ø‚£ø‚£ø‚£ß‚†Ä‚†Ä‚†Ä‚†Ä‚†ø‚†ø‚†Ä‚†Ä‚†Ä‚†Ä‚£∏‚°Ω\n" +
        "‚†Ä‚†Ä‚¢∏‚£ø‚°á‚†Ä‚†Ä‚£Ä‚£Ä‚°Ä‚†Ä‚¢ª‚£ø‚£ø‚£ø‚£ø‚£ø‚†Ä‚†Ä‚¢ø‚£ø‚£ø‚£ø‚£ø‚£ø‚°á‚†Ä‚†Ä‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚†Ä‚†Ä‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚°Ñ‚†Ä‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚°á‚†Ä‚†Ä‚£¥‚£ø‚£ø‚£ø‚£¶‚†Ä‚¢∏‚£ø‚°Ä\n" +
        "‚†Ä‚†Ä‚¢∏‚£ø‚°á‚¢†‚£æ‚£ø‚£ø‚£ø‚£ß‚£º‚£ø‚£ø‚£ø‚£ø‚£ø‚°á‚†Ä‚†∏‚£ø‚£ø‚£ø‚£ø‚£ø‚°á‚†Ä‚†Ä‚£ø‚£ø‚£ø‚£ø‚£ø‚†á‚†Ä‚†Ä‚¢ª‚£ø‚£ø‚£ø‚£ø‚£ø‚°á‚¢Ä‚£ø‚£ø‚£ø‚£ø‚£ø‚°ø‚†Ä‚†Ä‚†ò‚£ø‚£ø‚£ø‚£ø‚£ß‚†Ä‚¢º‚£ó‚†Ä\n" +
        "‚†Ä‚†Ä‚†ò‚£ø‚°á‚¢∏‚£ø‚£ø‚£ø‚£ø‚°ø‚¢∏‚£ø‚£ø‚£ø‚£ø‚£ø‚†É‚†Ä‚†Ä‚†ò‚¢ø‚£ø‚£ø‚£ø‚£ß‚£Ä‚£†‚£ø‚£ø‚£ø‚°ø‚†ã‚†Ä‚†Ä‚£¥‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚†ø‚†ø‚†ø‚†ø‚†ã‚†Ä‚†Ä‚†Ä‚†Ä‚†ô‚†ø‚†ø‚†ü‚¢É‚¢Ä‚¢∏‚°á‚†Ä\n" +
        "‚†Ä‚†Ä‚†Ä‚£ø‚°á‚†à‚†ª‚£ø‚£ø‚£ø‚°§‚£æ‚£ø‚£ø‚£ø‚°ø‚†ã‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†â‚†õ‚†ª‚†ø‚†ø‚†õ‚†ü‚†õ‚†â‚†Ä‚†Ä‚¢Ä‚£Ä‚£à‚£â‚£â‚£â‚£°‚£†‚£Ä‚£Ä‚£Ä‚£¥‚£¶‚£¶‚£¶‚£∂‚£∂‚£∂‚£∂‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚†æ‚†æ‚†á‚†Ä\n" +
        "‚†Ä‚†Ä‚†Ä‚£ø‚£ø‚£Ä‚£Ä‚£Ä‚£â‚£â‚£Ö‚£ç‚£â‚£Å‚£†‚£§‚£†‚£§‚£∂‚£¶‚£¶‚£¥‚£∂‚£∂‚£ø‚£ø‚£ø‚£ø‚£ø‚†ø‚†ø‚†ø‚†ø‚†ø‚†õ‚†õ‚†õ‚†õ‚†õ‚†õ‚†õ‚†õ‚†ã‚†â‚†â‚†â‚†â‚†â‚†Å‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä\n" +
        "‚†Ä‚†Ä‚†Ä‚¢π‚£ø‚†ø‚†ø‚†ø‚†ø‚†ø‚†õ‚†õ‚†õ‚†õ‚†õ‚†ã‚†â‚†â‚†â‚†â‚†â‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä";
    }
    

    
    private static String GameOver() {
        return "‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚£Ä‚£†‚°Ä‚†Ä\n" +
               "‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚¢Ä‚£§‚£§‚†Ä‚†Ä‚†Ä‚¢Ä‚£¥‚£ø‚°∂‚†Ä‚£æ‚£ø‚£ø‚°ø‚†ü‚†õ‚†Å\n" +
               "‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚£Ä‚£Ä‚£Ñ‚£Ä‚†Ä‚†Ä‚†Ä‚†Ä‚£∂‚£∂‚£¶‚†Ä‚†Ä‚†Ä‚†Ä‚£º‚£ø‚£ø‚°á‚†Ä‚£†‚£ø‚£ø‚£ø‚†á‚£∏‚£ø‚£ø‚£ß‚£§‚†Ä‚†Ä‚†Ä\n" +
               "‚†Ä‚†Ä‚¢Ä‚£¥‚£æ‚£ø‚°ø‚†ø‚†ø‚†ø‚†á‚†Ä‚†Ä‚£∏‚£ø‚£ø‚£ø‚°Ü‚†Ä‚†Ä‚¢∞‚£ø‚£ø‚£ø‚£∑‚£º‚£ø‚£ø‚£ø‚°ø‚¢Ä‚£ø‚£ø‚°ø‚†ü‚†õ‚†Å‚†Ä‚†Ä\n" +
               "‚†Ä‚£¥‚£ø‚°ø‚†ã‚†Å‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚¢†‚£ø‚£ø‚£π‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚°è‚¢ª‚£ø‚£ø‚¢ø‚£ø‚£ø‚†É‚£º‚£ø‚£Ø‚£§‚£¥‚£∂‚£ø‚°§‚†Ä\n" +
               "‚£º‚£ø‚†è‚†Ä‚£Ä‚£†‚£§‚£∂‚£æ‚£∑‚†Ñ‚£∞‚£ø‚£ø‚°ø‚†ø‚†ª‚£ø‚£Ø‚£∏‚£ø‚°ø‚†Ä‚†Ä‚†Ä‚†Å‚£æ‚£ø‚°è‚¢†‚£ø‚£ø‚†ø‚†õ‚†ã‚†â‚†Ä‚†Ä‚†Ä\n" +
               "‚£ø‚£ø‚†≤‚¢ø‚£ø‚£ø‚£ø‚£ø‚°ø‚†ã‚¢∞‚£ø‚£ø‚†ã‚†Ä‚†Ä‚†Ä‚¢ª‚£ø‚£ø‚£ø‚†á‚†Ä‚†Ä‚†Ä‚†Ä‚†ô‚†õ‚†Ä‚†Ä‚†â‚†Å‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä\n" +
               "‚†π‚¢ø‚£∑‚£∂‚£ø‚£ø‚†ø‚†ã‚†Ä‚†Ä‚†à‚†ô‚†É‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Å‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä\n" +
               "‚†Ä‚†Ä‚†à‚†â‚†Å‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚£Ä‚£§‚£§‚£¥‚£∂‚£¶‚£§‚°Ä‚†Ä\n" +
               "‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚£Ä‚°Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚£†‚°á‚¢∞‚£∂‚£∂‚£æ‚°ø‚†∑‚£ø‚£ø‚£ø‚°ü‚†õ‚£â‚£ø‚£ø‚£ø‚†Ü\n" +
               "‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚¢Ä‚£§‚£∂‚£ø‚£ø‚°é‚£ø‚£ø‚£¶‚†Ä‚†Ä‚†Ä‚¢Ä‚£§‚£æ‚†ü‚¢Ä‚£ø‚£ø‚°ü‚£Å‚†Ä‚†Ä‚£∏‚£ø‚£ø‚£§‚£æ‚£ø‚°ø‚†õ‚†Å‚†Ä\n" +
               "‚†Ä‚†Ä‚†Ä‚†Ä‚£†‚£æ‚£ø‚°ø‚†õ‚†â‚¢ø‚£¶‚†ò‚£ø‚£ø‚°Ü‚†Ä‚¢†‚£æ‚£ø‚†ã‚†Ä‚£º‚£ø‚£ø‚£ø‚†ø‚†∑‚¢†‚£ø‚£ø‚£ø‚†ø‚¢ª‚£ø‚£ß‚†Ä‚†Ä‚†Ä\n" +
               "‚†Ä‚†Ä‚†Ä‚£¥‚£ø‚£ø‚†ã‚†Ä‚†Ä‚†Ä‚¢∏‚£ø‚£á‚¢π‚£ø‚£∑‚£∞‚£ø‚£ø‚†É‚†Ä‚¢†‚£ø‚£ø‚¢É‚£Ä‚£§‚£§‚£æ‚£ø‚°ü‚†Ä‚†Ä‚†Ä‚¢ª‚£ø‚£Ü‚†Ä‚†Ä\n" +
               "‚†Ä‚†Ä‚†Ä‚£ø‚£ø‚°á‚†Ä‚†Ä‚¢Ä‚£¥‚£ø‚£ø‚°ü‚†Ä‚£ø‚£ø‚£ø‚£ø‚†É‚†Ä‚†Ä‚£æ‚£ø‚£ø‚°ø‚†ø‚†õ‚¢õ‚£ø‚°ü‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†ª‚†ø‚†Ä‚†Ä\n" +
               "‚†Ä‚†Ä‚†Ä‚†π‚£ø‚£ø‚£∂‚£æ‚£ø‚£ø‚£ø‚†ü‚†Å‚†Ä‚†∏‚¢ø‚£ø‚†á‚†Ä‚†Ä‚†Ä‚†õ‚†õ‚†Å‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Å‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä\n" +
               "‚†Ä‚†Ä‚†Ä‚†Ä‚†à‚†ô‚†õ‚†õ‚†õ‚†ã‚†Å‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä";
    }
    
    private static void broadcastToAll(String message) {
        for (ClientHandler client : clients.values()) {
            client.sendMessage(message);
        }
    }
    
    private static void resetGame() {
        Arrivals.ClearwPositions();
        for (PlayerInfo player : players.values()) {
            player.frogX = WIDTH / 2;
            player.frogY = HEIGHT - 1;
        }
        initGame();
    }
    
    public static void main(String[] args) {
        try {
            // Initialisation du jeu
            initGame();
            
            // D√©marrer le serveur
            ServerSocket serverSocket = new ServerSocket(12345);
            System.out.println("Serveur d√©marr√©, en attente de connexions...");
            
            while (true) {
                Socket clientSocket = serverSocket.accept();
                System.out.println("Nouvelle grenouille connect√©e !");
                
                // Cr√©er un nouveau joueur
                PlayerInfo player = new PlayerInfo(nextPlayerId++);
                players.put(clientSocket, player);
                
                // Cr√©er et d√©marrer un gestionnaire de client
                ClientHandler clientHandler = new ClientHandler(clientSocket, player);
                clients.put(clientSocket, clientHandler);
                clientHandler.start();
            }
        } catch (IOException e) {
            e.printStackTrace();
        }
    }
    
    private static void initGame() {
        
        
        obstacles = new Obstacle[5];
        for (int i = 0; i < obstacles.length; i++) {
            obstacles[i] = new Obstacle(i * 4, HEIGHT / 2 - 2);
            obstacles[i].start();
        }
    }
    
    // M√©thodes existantes
    private static boolean isObstacleAt(int x, int y) {
        for (Obstacle obs : obstacles) {
            if (obs.getX() == x && obs.getY() == y) {
                return true;
            }
        }
        return false;
    }
    
    private static void stopAllObstacles() {
        if (obstacles != null) {
            for (Obstacle obs : obstacles) {
                if (obs != null) {
                    obs.stopObstacle();
                }
            }
        }
    }

    // private static void clearScreen() {
    //     client.sendMessage("\033[H\033[2J");
    //     System.out.flush();
    // }

    private static void pause(int ms) {
        try {
            Thread.sleep(ms);
        } catch (InterruptedException e) {
           
        }
    }
    
   
}